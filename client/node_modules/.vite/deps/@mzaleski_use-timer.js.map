{
  "version": 3,
  "sources": ["../../@mzaleski/use-timer/dist/index.js"],
  "sourcesContent": ["\"use strict\";\n/**\nMIT License\n\nCopyright (c) 2022 Maximilien Zaleski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useTimer = void 0;\nconst react_1 = __importDefault(require(\"react\"));\n/**\n * useTimer is a hook that spawns a timer which ticks every second.\n *\n * @param initialSeconds Initial (remaining) time in seconds.\n * @param initialFreeze Initial freeze state; if true, the timer will not tick.\n * @param onCompleted Callback on timer completion.\n */\nfunction useTimer(initialSeconds, initialFreeze, onCompleted) {\n    const [secondsRemaining, setSecondsRemaining] = react_1.default.useState(initialSeconds);\n    const [timeRemaining, setTimeRemaining] = react_1.default.useState(getTimeString(initialSeconds));\n    const [freeze, setFreeze] = react_1.default.useState(initialFreeze);\n    react_1.default.useEffect(() => {\n        // Make the timer tick every second.\n        if (secondsRemaining > 0 && !freeze) {\n            const timeout = setTimeout(() => {\n                const hydrated = secondsRemaining - 1;\n                setTimeRemaining(getTimeString(hydrated));\n                setSecondsRemaining(hydrated);\n            }, 1000);\n            return () => clearTimeout(timeout);\n        }\n        else if (secondsRemaining === 0 && !freeze) {\n            // Countdown has been reached; reset timer.\n            setFreeze(true);\n            if (onCompleted)\n                onCompleted();\n        }\n    }, [freeze, secondsRemaining]);\n    // This implementation circumvents the preferred pattern of calling the setter itself. \n    // However, the hook might fall short by a single render resulting in an erroneous time string to\n    // be displayed.\n    react_1.default.useEffect(() => {\n        setTimeRemaining(getTimeString(initialSeconds));\n        setSecondsRemaining(initialSeconds);\n    }, [initialSeconds]);\n    const resetTimer = react_1.default.useCallback((freeze = false) => {\n        setSecondsRemaining(initialSeconds);\n        setTimeRemaining(getTimeString(initialSeconds));\n        setFreeze(freeze);\n    }, [initialSeconds]);\n    return {\n        timeRemaining,\n        secondsRemaining,\n        isFrozen: freeze,\n        setSecondsRemaining,\n        setFreeze,\n        resetTimer,\n    };\n}\nexports.useTimer = useTimer;\n/**\n * calculateTimeRemaining returns a formatted time string.\n *\n * @param secondsRemaining The number of seconds remaining.\n */\nfunction getTimeString(secondsRemaining) {\n    if (secondsRemaining == 0)\n        return '00:00';\n    else {\n        const minutes = Math.floor(secondsRemaining / 60);\n        const seconds = secondsRemaining % 60;\n        return `${minutes < 10 ? `0${minutes}` : minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;\n    }\n}\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAwBA,QAAI,kBAAmB,WAAQ,QAAK,mBAAoB,SAAU,KAAK;AACnE,aAAQ,OAAO,IAAI,aAAc,MAAM,EAAE,WAAW,IAAI;AAAA,IAC5D;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,WAAW;AACnB,QAAM,UAAU,gBAAgB,eAAgB;AAQhD,aAAS,SAAS,gBAAgB,eAAe,aAAa;AAC1D,YAAM,CAAC,kBAAkB,mBAAmB,IAAI,QAAQ,QAAQ,SAAS,cAAc;AACvF,YAAM,CAAC,eAAe,gBAAgB,IAAI,QAAQ,QAAQ,SAAS,cAAc,cAAc,CAAC;AAChG,YAAM,CAAC,QAAQ,SAAS,IAAI,QAAQ,QAAQ,SAAS,aAAa;AAClE,cAAQ,QAAQ,UAAU,MAAM;AAE5B,YAAI,mBAAmB,KAAK,CAAC,QAAQ;AACjC,gBAAM,UAAU,WAAW,MAAM;AAC7B,kBAAM,WAAW,mBAAmB;AACpC,6BAAiB,cAAc,QAAQ,CAAC;AACxC,gCAAoB,QAAQ;AAAA,UAChC,GAAG,GAAI;AACP,iBAAO,MAAM,aAAa,OAAO;AAAA,QACrC,WACS,qBAAqB,KAAK,CAAC,QAAQ;AAExC,oBAAU,IAAI;AACd,cAAI;AACA,wBAAY;AAAA,QACpB;AAAA,MACJ,GAAG,CAAC,QAAQ,gBAAgB,CAAC;AAI7B,cAAQ,QAAQ,UAAU,MAAM;AAC5B,yBAAiB,cAAc,cAAc,CAAC;AAC9C,4BAAoB,cAAc;AAAA,MACtC,GAAG,CAAC,cAAc,CAAC;AACnB,YAAM,aAAa,QAAQ,QAAQ,YAAY,CAACA,UAAS,UAAU;AAC/D,4BAAoB,cAAc;AAClC,yBAAiB,cAAc,cAAc,CAAC;AAC9C,kBAAUA,OAAM;AAAA,MACpB,GAAG,CAAC,cAAc,CAAC;AACnB,aAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AACA,YAAQ,WAAW;AAMnB,aAAS,cAAc,kBAAkB;AACrC,UAAI,oBAAoB;AACpB,eAAO;AAAA,WACN;AACD,cAAM,UAAU,KAAK,MAAM,mBAAmB,EAAE;AAChD,cAAM,UAAU,mBAAmB;AACnC,eAAO,GAAG,UAAU,KAAK,IAAI,OAAO,KAAK,OAAO,IAAI,UAAU,KAAK,IAAI,OAAO,KAAK,OAAO;AAAA,MAC9F;AAAA,IACJ;AAAA;AAAA;",
  "names": ["freeze"]
}
