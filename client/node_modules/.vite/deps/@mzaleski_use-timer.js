import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/@mzaleski/use-timer/dist/index.js
var require_dist = __commonJS({
  "node_modules/@mzaleski/use-timer/dist/index.js"(exports) {
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTimer = void 0;
    var react_1 = __importDefault(require_react());
    function useTimer(initialSeconds, initialFreeze, onCompleted) {
      const [secondsRemaining, setSecondsRemaining] = react_1.default.useState(initialSeconds);
      const [timeRemaining, setTimeRemaining] = react_1.default.useState(getTimeString(initialSeconds));
      const [freeze, setFreeze] = react_1.default.useState(initialFreeze);
      react_1.default.useEffect(() => {
        if (secondsRemaining > 0 && !freeze) {
          const timeout = setTimeout(() => {
            const hydrated = secondsRemaining - 1;
            setTimeRemaining(getTimeString(hydrated));
            setSecondsRemaining(hydrated);
          }, 1e3);
          return () => clearTimeout(timeout);
        } else if (secondsRemaining === 0 && !freeze) {
          setFreeze(true);
          if (onCompleted)
            onCompleted();
        }
      }, [freeze, secondsRemaining]);
      react_1.default.useEffect(() => {
        setTimeRemaining(getTimeString(initialSeconds));
        setSecondsRemaining(initialSeconds);
      }, [initialSeconds]);
      const resetTimer = react_1.default.useCallback((freeze2 = false) => {
        setSecondsRemaining(initialSeconds);
        setTimeRemaining(getTimeString(initialSeconds));
        setFreeze(freeze2);
      }, [initialSeconds]);
      return {
        timeRemaining,
        secondsRemaining,
        isFrozen: freeze,
        setSecondsRemaining,
        setFreeze,
        resetTimer
      };
    }
    exports.useTimer = useTimer;
    function getTimeString(secondsRemaining) {
      if (secondsRemaining == 0)
        return "00:00";
      else {
        const minutes = Math.floor(secondsRemaining / 60);
        const seconds = secondsRemaining % 60;
        return `${minutes < 10 ? `0${minutes}` : minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;
      }
    }
  }
});
export default require_dist();
//# sourceMappingURL=@mzaleski_use-timer.js.map
